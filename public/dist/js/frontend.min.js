// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"../../node_modules/timeago.js/esm/lang/en_US.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var EN_US = ['second', 'minute', 'hour', 'day', 'week', 'month', 'year'];

function _default(diff, idx) {
  if (idx === 0) return ['just now', 'right now'];
  var unit = EN_US[Math.floor(idx / 2)];
  if (diff > 1) unit += 's';
  return [diff + " " + unit + " ago", "in " + diff + " " + unit];
}
},{}],"../../node_modules/timeago.js/esm/lang/zh_CN.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var ZH_CN = ['秒', '分钟', '小时', '天', '周', '个月', '年'];

function _default(diff, idx) {
  if (idx === 0) return ['刚刚', '片刻后'];
  var unit = ZH_CN[~~(idx / 2)];
  return [diff + " " + unit + "\u524D", diff + " " + unit + "\u540E"];
}
},{}],"../../node_modules/timeago.js/esm/register.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLocale = exports.register = void 0;

/**
 * Created by hustcc on 18/5/20.
 * Contract: i@hust.cc
 */

/**
 * All supported locales
 */
var Locales = {};
/**
 * register a locale
 * @param locale
 * @param func
 */

var register = function (locale, func) {
  Locales[locale] = func;
};
/**
 * get a locale, default is en_US
 * @param locale
 * @returns {*}
 */


exports.register = register;

var getLocale = function (locale) {
  return Locales[locale] || Locales['en_US'];
};

exports.getLocale = getLocale;
},{}],"../../node_modules/timeago.js/esm/utils/date.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toDate = toDate;
exports.formatDiff = formatDiff;
exports.diffSec = diffSec;
exports.nextInterval = nextInterval;

/**
 * Created by hustcc on 18/5/20.
 * Contract: i@hust.cc
 */
var SEC_ARRAY = [60, 60, 24, 7, 365 / 7 / 12, 12];
/**
 * format Date / string / timestamp to timestamp
 * @param input
 * @returns {*}
 */

function toDate(input) {
  if (input instanceof Date) return input; // @ts-ignore

  if (!isNaN(input) || /^\d+$/.test(input)) return new Date(parseInt(input));
  input = (input || ''). // @ts-ignore
  trim().replace(/\.\d+/, '') // remove milliseconds
  .replace(/-/, '/').replace(/-/, '/').replace(/(\d)T(\d)/, '$1 $2').replace(/Z/, ' UTC') // 2017-2-5T3:57:52Z -> 2017-2-5 3:57:52UTC
  .replace(/([+-]\d\d):?(\d\d)/, ' $1$2'); // -04:00 -> -0400

  return new Date(input);
}
/**
 * format the diff second to *** time ago, with setting locale
 * @param diff
 * @param localeFunc
 * @returns
 */


function formatDiff(diff, localeFunc) {
  /**
   * if locale is not exist, use defaultLocale.
   * if defaultLocale is not exist, use build-in `en`.
   * be sure of no error when locale is not exist.
   *
   * If `time in`, then 1
   * If `time ago`, then 0
   */
  var agoIn = diff < 0 ? 1 : 0;
  /**
   * Get absolute value of number (|diff| is non-negative) value of x
   * |diff| = diff if diff is positive
   * |diff| = -diff if diff is negative
   * |0| = 0
   */

  diff = Math.abs(diff);
  /**
   * Time in seconds
   */

  var totalSec = diff;
  /**
   * Unit of time
   */

  var idx = 0;

  for (; diff >= SEC_ARRAY[idx] && idx < SEC_ARRAY.length; idx++) {
    diff /= SEC_ARRAY[idx];
  }
  /**
   * Math.floor() is alternative of ~~
   *
   * The differences and bugs:
   * Math.floor(3.7) -> 4 but ~~3.7 -> 3
   * Math.floor(1559125440000.6) -> 1559125440000 but ~~1559125440000.6 -> 52311552
   *
   * More information about the performance of algebraic:
   * https://www.youtube.com/watch?v=65-RbBwZQdU
   */


  diff = Math.floor(diff);
  idx *= 2;
  if (diff > (idx === 0 ? 9 : 1)) idx += 1;
  return localeFunc(diff, idx, totalSec)[agoIn].replace('%s', diff.toString());
}
/**
 * calculate the diff second between date to be formatted an now date.
 * @param date
 * @param relativeDate
 * @returns {number}
 */


function diffSec(date, relativeDate) {
  var relDate = relativeDate ? toDate(relativeDate) : new Date();
  return (+relDate - +toDate(date)) / 1000;
}
/**
 * nextInterval: calculate the next interval time.
 * - diff: the diff sec between now and date to be formatted.
 *
 * What's the meaning?
 * diff = 61 then return 59
 * diff = 3601 (an hour + 1 second), then return 3599
 * make the interval with high performance.
 **/


function nextInterval(diff) {
  var rst = 1,
      i = 0,
      d = Math.abs(diff);

  for (; diff >= SEC_ARRAY[i] && i < SEC_ARRAY.length; i++) {
    diff /= SEC_ARRAY[i];
    rst *= SEC_ARRAY[i];
  }

  d = d % rst;
  d = d ? rst - d : rst;
  return Math.ceil(d);
}
},{}],"../../node_modules/timeago.js/esm/format.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.format = void 0;

var _date = require("./utils/date");

var _register = require("./register");

/**
 * format a TDate into string
 * @param date
 * @param locale
 * @param opts
 */
var format = function (date, locale, opts) {
  // diff seconds
  var sec = (0, _date.diffSec)(date, opts && opts.relativeDate); // format it with locale

  return (0, _date.formatDiff)(sec, (0, _register.getLocale)(locale));
};

exports.format = format;
},{"./utils/date":"../../node_modules/timeago.js/esm/utils/date.js","./register":"../../node_modules/timeago.js/esm/register.js"}],"../../node_modules/timeago.js/esm/utils/dom.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDateAttribute = getDateAttribute;
exports.setTimerId = setTimerId;
exports.getTimerId = getTimerId;
var ATTR_TIMEAGO_TID = 'timeago-id';
/**
 * get the datetime attribute, `datetime` are supported.
 * @param node
 * @returns {*}
 */

function getDateAttribute(node) {
  return node.getAttribute('datetime');
}
/**
 * set the node attribute, native DOM
 * @param node
 * @param timerId
 * @returns {*}
 */


function setTimerId(node, timerId) {
  // @ts-ignore
  node.setAttribute(ATTR_TIMEAGO_TID, timerId);
}
/**
 * get the timer id
 * @param node
 */


function getTimerId(node) {
  return parseInt(node.getAttribute(ATTR_TIMEAGO_TID));
}
},{}],"../../node_modules/timeago.js/esm/realtime.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cancel = cancel;
exports.render = render;

var _dom = require("./utils/dom");

var _date = require("./utils/date");

var _register = require("./register");

// all realtime timer
var TIMER_POOL = {};
/**
 * clear a timer from pool
 * @param tid
 */

var clear = function (tid) {
  clearTimeout(tid);
  delete TIMER_POOL[tid];
}; // run with timer(setTimeout)


function run(node, date, localeFunc, opts) {
  // clear the node's exist timer
  clear((0, _dom.getTimerId)(node));
  var relativeDate = opts.relativeDate,
      minInterval = opts.minInterval; // get diff seconds

  var diff = (0, _date.diffSec)(date, relativeDate); // render

  node.innerText = (0, _date.formatDiff)(diff, localeFunc);
  var tid = setTimeout(function () {
    run(node, date, localeFunc, opts);
  }, Math.min(Math.max((0, _date.nextInterval)(diff), minInterval || 1) * 1000, 0x7fffffff)); // there is no need to save node in object. Just save the key

  TIMER_POOL[tid] = 0;
  (0, _dom.setTimerId)(node, tid);
}
/**
 * cancel a timer or all timers
 * @param node - node hosting the time string
 */


function cancel(node) {
  // cancel one
  if (node) clear((0, _dom.getTimerId)(node)); // cancel all
  // @ts-ignore
  else Object.keys(TIMER_POOL).forEach(clear);
}
/**
 * render a dom realtime
 * @param nodes
 * @param locale
 * @param opts
 */


function render(nodes, locale, opts) {
  // by .length
  // @ts-ignore
  var nodeList = nodes.length ? nodes : [nodes];
  nodeList.forEach(function (node) {
    run(node, (0, _dom.getDateAttribute)(node), (0, _register.getLocale)(locale), opts || {});
  });
  return nodeList;
}
},{"./utils/dom":"../../node_modules/timeago.js/esm/utils/dom.js","./utils/date":"../../node_modules/timeago.js/esm/utils/date.js","./register":"../../node_modules/timeago.js/esm/register.js"}],"../../node_modules/timeago.js/esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "register", {
  enumerable: true,
  get: function () {
    return _register.register;
  }
});
Object.defineProperty(exports, "format", {
  enumerable: true,
  get: function () {
    return _format.format;
  }
});
Object.defineProperty(exports, "render", {
  enumerable: true,
  get: function () {
    return _realtime.render;
  }
});
Object.defineProperty(exports, "cancel", {
  enumerable: true,
  get: function () {
    return _realtime.cancel;
  }
});

var _en_US = _interopRequireDefault(require("./lang/en_US"));

var _zh_CN = _interopRequireDefault(require("./lang/zh_CN"));

var _register = require("./register");

var _format = require("./format");

var _realtime = require("./realtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Created by hustcc on 18/5/20.
 * Contract: i@hust.cc
 */
(0, _register.register)('en_US', _en_US.default);
(0, _register.register)('zh_CN', _zh_CN.default);
},{"./lang/en_US":"../../node_modules/timeago.js/esm/lang/en_US.js","./lang/zh_CN":"../../node_modules/timeago.js/esm/lang/zh_CN.js","./register":"../../node_modules/timeago.js/esm/register.js","./format":"../../node_modules/timeago.js/esm/format.js","./realtime":"../../node_modules/timeago.js/esm/realtime.js"}],"lib/api.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AdminApi = exports.adminApi = exports.PublicApi = exports.publicApi = void 0;

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * shorten function for internal usage
 */
var esc = encodeURIComponent;
/**
 * sanitize params and only return valid params
 * @param unix_timestamp
 * @param tags
 * @param output
 */

var getSanitizeParams = function getSanitizeParams() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$unix_timestamp_a = _ref.unix_timestamp_after,
      unix_timestamp_after = _ref$unix_timestamp_a === void 0 ? null : _ref$unix_timestamp_a,
      _ref$unix_timestamp_b = _ref.unix_timestamp_before,
      unix_timestamp_before = _ref$unix_timestamp_b === void 0 ? null : _ref$unix_timestamp_b,
      _ref$tags = _ref.tags,
      tags = _ref$tags === void 0 ? null : _ref$tags,
      _ref$number_of_partic = _ref.number_of_particles,
      number_of_particles = _ref$number_of_partic === void 0 ? null : _ref$number_of_partic,
      _ref$order_direction = _ref.order_direction,
      order_direction = _ref$order_direction === void 0 ? null : _ref$order_direction,
      _ref$output = _ref.output,
      output = _ref$output === void 0 ? "json" : _ref$output;

  var params = {};

  if (unix_timestamp_after !== null) {
    params.unix_timestamp_after = parseInt(unix_timestamp_after);
  }

  if (unix_timestamp_before !== null) {
    params.unix_timestamp_before = parseInt(unix_timestamp_before);
  }

  if (number_of_particles !== null) {
    params.number_of_particles = parseInt(number_of_particles);
  }

  if (order_direction !== null) {
    params.order_direction = order_direction;
  }

  if (tags !== null) {
    if (_typeof(tags) !== _typeof([])) throw new Error("Tags need to be an array of strings");
    params.tags = tags.map(esc);
  }

  if (output !== "html") output = "json";
  params.output = output;
  return params;
};
/**
 * stringify params
 * @param params
 * @return {string}
 */


var getParamsString = function getParamsString(params) {
  return Object.keys(params).map(function (param) {
    var val = params[param];

    if (_typeof(val) === _typeof([])) {
      return val.map(function (v) {
        return "".concat(param, "[]=").concat(v);
      }).join("&");
    }

    return param + "=" + params[param];
  }).join("&");
};
/**
 * sanitize and stringify params
 * @param params
 * @return {string}
 */


var getSanitizedParamsString = function getSanitizedParamsString(params) {
  return getParamsString(getSanitizeParams(params));
};
/**
 * api for public use
 */


var publicApi = function publicApi(config) {
  var routes = config.routes;
  var last_request_timestamp = config.last_request_timestamp;
  /**
   * resolve particles response and save request timestamp
   * @param res
   * @return {*}
   */

  var resolveParticles = function resolveParticles(res) {
    return res.json().then(function (json) {
      last_request_timestamp = json.request_timestamp;
      return json.particles;
    });
  };

  return {
    fetchParticles: function fetchParticles(params) {
      console.log(params);
      return fetch(routes.getParticles + "?" + getSanitizedParamsString(params), {
        method: 'GET'
      }).then(resolveParticles).catch(console.error);
    },
    fetchParticlesUpdate: function fetchParticlesUpdate(params) {
      var p = _objectSpread({
        unix_timestamp_after: last_request_timestamp,
        order_direction: "DESC"
      }, params);

      return fetch(routes.getParticles + "?" + getSanitizedParamsString(p)).then(resolveParticles).catch(console.error);
    },
    resetLastRequestTimestamp: function resetLastRequestTimestamp() {
      last_request_timestamp = 0;
    }
  };
};

exports.publicApi = publicApi;

var PublicApi = /*#__PURE__*/function () {
  function PublicApi(config) {
    _classCallCheck(this, PublicApi);

    this.api = publicApi(config);
    this.fetchParticles = this.api.fetchParticles;
    this.fetchParticlesUpdate = this.api.fetchParticlesUpdate;
    this.resetLastRequestTimestamp = this.api.resetLastRequestTimestamp;
  }

  _createClass(PublicApi, [{
    key: "fetchParticles",
    value: function fetchParticles(params) {
      return this.api.fetchParticles(params);
    }
  }, {
    key: "fetchParticlesUpdate",
    value: function fetchParticlesUpdate(params) {
      return this.api.fetchParticlesUpdate(params);
    }
  }, {
    key: "resetLastRequestTimestamp",
    value: function resetLastRequestTimestamp() {
      this.api.resetLastRequestTimestamp();
    }
  }]);

  return PublicApi;
}();
/**
 * api for admin use
 */


exports.PublicApi = PublicApi;

var adminApi = function adminApi(config) {
  var routes = config.routes;
  var wp_rest_nonce = config.wp_rest_nonce;
  var pApi = publicApi(config);
  /**
   * post request to backend and save new nonce of response
   * @param {string} route
   * @param {object} data
   * @param {string} method
   * @return {Promise<any | void>}
   */

  var requestWithNonce = function requestWithNonce(route, data, method) {
    return fetch(route, {
      method: method,
      headers: {
        'Content-Type': 'application/json',
        'X-WP-Nonce': wp_rest_nonce
      },
      credentials: 'include',
      body: JSON.stringify(data)
    }).then(function (res) {
      return res.json();
    }).then(resolveNonce).catch(console.error);
  };

  var postWithNonce = function postWithNonce(route, data) {
    return requestWithNonce(route, data, "POST");
  };

  var deleteWithNonce = function deleteWithNonce(route, data) {
    return requestWithNonce(route, data, "DELETE");
  };

  var resolveNonce = function resolveNonce(json) {
    wp_rest_nonce = json.wp_rest_nonce;
    return json;
  };

  var attachmentCache = {};
  return _objectSpread({}, pApi, {
    updateParticle: function updateParticle(particle) {
      // TODO: sanitize particle data
      return postWithNonce(routes.updateParticle, particle).then(function (json) {
        return json.particle;
      });
    },
    deleteParticle: function deleteParticle(particle_id) {
      return deleteWithNonce(routes.deleteParticle, {
        particle_id: particle_id
      });
    },
    fetchAttachment: function fetchAttachment(attachment_id) {
      if (_typeof(attachmentCache[attachment_id]) === _typeof({})) {
        return new Promise(function (resolve) {
          resolve(attachmentCache[attachment_id]);
        });
      }

      return fetch("/wp-json/wp/v2/media/".concat(attachment_id)).then(function (res) {
        return res.json();
      }).then(function (attachment) {
        attachmentCache[attachment.id] = attachment;
        return attachment;
      }).catch(function () {
        attachmentCache[attachment_id] = {
          error: true
        };
      });
    },
    uploadAttachment: function uploadAttachment(form) {
      var onRightBeforeUpload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      return new Promise(function (resolve, reject) {
        // TODO: catch errors
        // use fetch api?
        var formData = new FormData(form);
        if (onRightBeforeUpload) onRightBeforeUpload();
        $.ajax({
          url: routes.upload,
          method: "POST",
          cache: false,
          contentType: false,
          processData: false,
          headers: {
            // 'Content-Type': 'application/json',
            'X-WP-Nonce': wp_rest_nonce
          },
          data: formData,
          success: function success(json) {
            resolve(resolveNonce(json));
          }
        });
      });
    }
  });
};

exports.adminApi = adminApi;

var AdminApi = /*#__PURE__*/function (_PublicApi) {
  _inherits(AdminApi, _PublicApi);

  var _super = _createSuper(AdminApi);

  function AdminApi(config) {
    var _this;

    _classCallCheck(this, AdminApi);

    _this = _super.call(this, config);
    _this.adminApi = adminApi(config);
    return _this;
  }

  _createClass(AdminApi, [{
    key: "updateParticle",
    value: function updateParticle(particle) {
      return this.adminApi.updateParticle(particle);
    }
  }]);

  return AdminApi;
}(PublicApi);

exports.AdminApi = AdminApi;
},{}],"lib/utils/events.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.triggerRemoveParticle = exports.onRemoveParticle = exports.triggerUpdateParticle = exports.onUpdateParticle = exports.triggerAddParticle = exports.onAddParticle = exports.trigger = exports.listen = void 0;

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// ----------------------
// basics
// ----------------------
var _events = {};

var listen = function listen(on, fn) {
  if (_typeof(_events[on]) === (typeof undefined === "undefined" ? "undefined" : _typeof(undefined))) {
    _events[on] = [];
  }

  _events[on].push(fn); // off function


  return function () {
    _events[on] = _events[on].filter(function (_fn) {
      return _fn !== fn;
    });
  };
};

exports.listen = listen;

var trigger = function trigger(on, payload) {
  if (_typeof(_events[on]) !== _typeof([])) return;

  _events[on].forEach(function (fn) {
    fn(payload);
  });
};

exports.trigger = trigger;

var onAddParticle = function onAddParticle(fn) {
  return listen("particleAdd", fn);
};

exports.onAddParticle = onAddParticle;

var triggerAddParticle = function triggerAddParticle($particle) {
  return trigger("particleAdd", $particle);
};

exports.triggerAddParticle = triggerAddParticle;

var onUpdateParticle = function onUpdateParticle(fn) {
  return listen("particleUpdate", fn);
};

exports.onUpdateParticle = onUpdateParticle;

var triggerUpdateParticle = function triggerUpdateParticle($particle) {
  return trigger("particleUpdate", $particle);
};

exports.triggerUpdateParticle = triggerUpdateParticle;

var onRemoveParticle = function onRemoveParticle(fn) {
  return listen("particleRemove", fn);
};

exports.onRemoveParticle = onRemoveParticle;

var triggerRemoveParticle = function triggerRemoveParticle($particle) {
  return trigger("particleRemove", $particle);
}; // ----------------------
// for public free usage
// ----------------------


exports.triggerRemoveParticle = triggerRemoveParticle;
var _default = {
  listen: listen,
  trigger: trigger,
  onAddParticle: onAddParticle,
  triggerAddParticle: triggerAddParticle,
  onUpdateParticle: onUpdateParticle,
  triggerUpdateParticle: triggerUpdateParticle,
  onRemoveParticle: onRemoveParticle,
  triggerRemoveParticle: triggerRemoveParticle
};
exports.default = _default;
},{}],"frontend.js":[function(require,module,exports) {
"use strict";

var _timeago = require("timeago.js");

var _api = require("./lib/api");

var _events = require("./lib/utils/events");

function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// the local dict example is below.
var localeFunc = function localeFunc(number, index, total_sec) {
  // number: the timeago / timein number;
  // index: the index of array below;
  // total_sec: total seconds between date to be formatted and today's date;
  return [['jetzt', 'jetzt'], ['vor %s Sekunden', 'in %s Sekunden'], ['vor 1 Minute', 'in 1 Minute'], ['vor %s Minuten', 'in %s Minuten'], ['vor 1 Stunde', 'in einer Stunde'], ['vor %s Stunden', 'in %s Stunden'], ['vor 1 Tag', 'in 1 Tag'], ['vor %s Tagen', 'in %s Tagen'], ['vor 1 Woche', 'in 1 Woche'], ['vor %s Wochen', 'in %s Wochen'], ['vor 1 Monat', 'in 1 Monat'], ['vor %s Monaten', 'in %s Monaten'], ['vor 1 Jahr', 'in 1 Jahr'], ['vor %s Jahren', 'in %s Jahr']][index];
}; // register your locale with timeago


(0, _timeago.register)('de_DE', localeFunc);

(function ($, config) {
  var selectors = config.selectors;
  var isFetchUpdatesActive = config.isFetchUpdatesActive;
  var $body = $("body");
  var $root = $("#" + selectors.rootId);
  var $list = $("#" + selectors.listId);
  var $loadMore = $("#" + selectors.loadMoreId); //------------------------------------------------------------------------
  // if important elements are missing in frontend, we cannot help
  //------------------------------------------------------------------------

  if ($root.length !== 1 || $list.length !== 1) {
    console.error("Missing root and list ids", selectors);
    return;
  }

  var api = (0, _api.publicApi)(config);
  LiveNews.api = api;
  LiveNews.timeagoize = timeagoize;
  LiveNews.listeners = {
    onAddParticle: _events.onAddParticle
  };
  /**
   * @param {boolean} isActive
   */

  LiveNews.autoFetchUpdates = function (isActive) {
    isFetchUpdatesActive = isActive;
    fetchParticlesUpdate();
  }; //------------------------------------------------------------------------
  // start pulling news
  //------------------------------------------------------------------------


  var fetchParticlesTimeout = null;

  function fetchParticlesUpdate() {
    clearTimeout(fetchParticlesTimeout);
    if (!isFetchUpdatesActive) return;
    $body.addClass("live-news-status__is-fetching-update");
    api.fetchParticlesUpdate({
      output: "html"
    }).then(function (particles) {
      console.log(particles);
      $body.removeClass("live-news-status__is-fetching-update");
      $body.addClass("live-news-status__fetched-update");
      setTimeout(function () {
        $body.removeClass("live-news-status__fetched-update");
      }, 500); // TODO: watch for problems

      var success = updateView(particles.reverse(), function ($particle) {
        return $list.prepend($particle);
      });

      if (success) {
        fetchParticlesTimeout = setTimeout(fetchParticlesUpdate, 5000);
      } else {
        console.error("something went wrong...");
      }
    });
  }

  fetchParticlesUpdate(); //------------------------------------------------------------------------
  // load particles of the past
  //------------------------------------------------------------------------

  if ($loadMore.length) {
    var isLoadingMore = false;
    $loadMore.on("click", function (e) {
      e.preventDefault();
      if (isLoadingMore) return;
      isLoadingMore = true;
      $body.addClass("live-news-status__is-fetching-more");
      api.fetchParticles({
        unix_timestamp_before: $list.children().last().data("particle-modified"),
        number_of_particles: 5,
        output: "html"
      }).then(function (result) {
        isLoadingMore = false;
        $body.removeClass("live-news-status__is-fetching-more");
        updateView(result, function ($particle) {
          return $list.append($particle);
        });
      });
    });
  } //------------------------------------------------------------------------
  // update view with particle modifications
  //------------------------------------------------------------------------


  function updateView(particles, addToPosition) {
    if (_typeof(particles) !== _typeof([])) return false;

    var _iterator = _createForOfIteratorHelper(particles),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var p = _step.value;
        var id = p.id,
            html = p.html;
        var $particle = $list.find("[data-particle-id=".concat(id, "]"));
        var $newParticle = $(html);

        if (p.is_deleted) {
          // DELETE
          $particle.remove();
          continue;
        }

        if ($particle.length) {
          // UPDATE
          $particle.replaceWith($newParticle);
        } else {
          // INSERT
          $newParticle.data("particle", p);
          addToPosition($newParticle);
          (0, _events.triggerAddParticle)($newParticle);
        } // start timeago


        timeagoize($newParticle.find(".timeago"));
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return true;
  } //------------------------------------------------------------------------
  // update view with particle modifications
  //------------------------------------------------------------------------


  function timeagoize($dates) {
    (0, _timeago.render)($dates.get(), 'de_DE');
  } // initial timeago for php rendered elements


  timeagoize($('.timeago'));
})(jQuery, LiveNews);
},{"timeago.js":"../../node_modules/timeago.js/esm/index.js","./lib/api":"lib/api.js","./lib/utils/events":"lib/utils/events.js"}],"../../node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "49927" + '/');

  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);

          if (didAccept) {
            handled = true;
          }
        }
      }); // Enable HMR for CSS by default.

      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });

      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else if (location.reload) {
        // `location` global exists in a web worker context but lacks `.reload()` function.
        location.reload();
      }
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }

  if (checkedAssets[id]) {
    return;
  }

  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}

function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }
}
},{}]},{},["../../node_modules/parcel-bundler/src/builtins/hmr-runtime.js","frontend.js"], null)
//# sourceMappingURL=/frontend.min.js.map